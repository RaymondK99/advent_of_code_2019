use crate::util::Part;
use crate::util::int_code_computer::*;
use std::collections::{HashMap, HashSet};

pub fn solve(input:String, part:Part) -> String {
    let opcodes:Vec<i64> = input.split(',')
        .map(|op| op.trim().parse().unwrap())
        .collect();

    let result = match part {
        Part::Part1 => part1(opcodes),
        Part::Part2 => part2(opcodes)
    };

    format!("{}",result)
}


fn build_map(opcodes:Vec<i64>) -> HashMap<(i32,i32),i64> {
    let mut program = Program::new(opcodes, None);

    while !program.is_halted() {
        program.run_instruction();
    }

    let output = program.get_output();
    let s:String = output.iter().map(|item| std::char::from_u32( *item as u32 ).unwrap() ).collect();
    println!("{}",s);

    let map :HashMap<(i32,i32),i64> = output.split( |i| *i == 10).enumerate()
        .map(|(y, row)| {
            row.iter().enumerate().map(move |(x, item)| {
                ( (x as i32,y as i32), *item)
            } )} ).flatten().collect();
    map
}

fn is_intersection(x:usize,y:usize,map:&HashMap<(usize,usize),i64>) -> bool {
    if x == 0 ||y == 0 {
        return false;
    }

    let points = [(x,y),(x-1,y),(x+1,y),(x,y-1),(x,y+1)];
    points.iter().map( |key| map.get(key))
        .filter( |item| item.is_some() && *item.unwrap() == 35 ).count() == points.len()
}

fn get_path(map:&HashMap<(usize,usize),i64>) {

}

fn part1(opcodes:Vec<i64>) -> i32 {
    let map = build_map(opcodes);

    map.iter().filter(|((x,y),&item)| {
            *x > 0 && *y > 0 && map.contains_key(&(*x+1,*y+1)) &&
            *map.get(&(*x,*y)).unwrap() == 35 &&
            *map.get(&(*x-1,*y)).unwrap() == 35 &&
            *map.get(&(*x+1,*y)).unwrap() == 35 &&
            *map.get(&(*x,*y-1)).unwrap() == 35 &&
            *map.get(&(*x,*y+1)).unwrap() == 35
    }).map(|((x,y),&item)| *y * *x ).fold(0, |acc, n| acc + n)
}


fn next_step(current_pos:&(i32,i32), current_dir:char, map:&HashMap<(i32,i32),i64>) -> (char,i32) {
    let &(x,y) = current_pos;

    //println!(" => current pos:{:?}, sym={}, dir={}", current_pos, map.get(current_pos).unwrap(), current_dir);
    let dir = if x > 0 && map.get(&(x-1,y)).is_some() && *map.get(&(x-1,y)).unwrap() == 35 && current_dir != '>' {
        '<'
    } else if  map.get(&(x+1,y)).is_some() && *map.get(&(x+1,y)).unwrap() == 35 && current_dir != '<' {
        '>'
    } else if y > 0 && *map.get(&(x,y-1)).unwrap() == 35 && current_dir != 'v' {
        '^'
    } else if map.get(&(x,y+1)).is_some() && *map.get(&(x,y+1)).unwrap() == 35 && current_dir != '^' {
        'v'
    } else {
        'F'
    };

    let dst = (x,y);
    let len = if dir == '<' {
        let mut x1 = x-1;
        while x1 >= 0 && *map.get( &(x1,y)).unwrap() == 35 {
            x1 -= 1;
        }
        x - x1 - 1
    } else if dir == '>' {
        let mut x1 = x+1;
        while map.get( &(x1,y)).is_some() && *map.get( &(x1,y)).unwrap() == 35 {
            x1 += 1;
        }
        x1 - x - 1
    } else if dir == '^' {
        let mut y1 = y-1;
        while y1 >= 0 && *map.get( &(x,y1)).unwrap() == 35 {
            y1 -= 1;
        }
        y - y1 - 1
    } else if dir == 'v' {
        let mut y1 = y+1;
        while map.get( &(x,y1)).is_some() && *map.get( &(x,y1)).unwrap() == 35 {
            y1 += 1;
        }
        y1 - y - 1
    } else {
        0
    };

    (dir,len)
}

fn next_pos( (x,y):&(i32,i32), (dir,len):&(char,i32)) -> (i32,i32) {
    match dir {
        '<' => (x-len,*y),
        '>' => (x+len,*y),
        '^' => (*x,y-len),
        'v' => (*x,y+len),
        'F' => (*x,*y),
        _ => panic!("..."),
    }
}

fn next_turn(current_dir:char, next_dir:char) -> char {

    // Up
    if current_dir == '^' && next_dir == '<' {
        'L'
    } else if current_dir == '^' && next_dir == '>' {
        'R'
    }
        // Left
    else if current_dir == '<' && next_dir == '^' {
        'R'
    } else if current_dir == '<' && next_dir == 'v' {
        'L'
    }

    // Right
    else if current_dir == '>' && next_dir == '^' {
        'L'
    } else if current_dir == '>' && next_dir == 'v' {
        'R'
    }

    // Down
    else if current_dir == 'v' && next_dir == '>' {
        'L'
    } else if current_dir == 'v' && next_dir == '<' {
        'R'
    } else {
        panic!("...")
    }

}

fn part2(opcodes:Vec<i64>) -> i32 {
    let map = build_map(opcodes);
    let start_sym = [60,62,94,118];
    let start_pair = map.iter().find(|((x,y), item)| start_sym.contains(item) ).unwrap();
    let start_sym = match *start_pair.1 {
        60 => '<',
        62 => '>',
        94 => '^',
        118 => 'v',
        _ => panic!("..."),
    };

    //println!("Start pos = {:?}",start_pair);

    let mut pos = start_pair.0.clone();
    let mut next_dir = start_sym;
    let mut i = 0;
    let mut path = vec![];
    while next_dir != 'F' {
        let next = next_step(&pos, next_dir, &map);
        pos = next_pos(&pos, &next);
        if next.0 != 'F' {
            path.push( (next_turn(next_dir, next.0),next.1));
        }
        next_dir = next.0;
        //println!("next step = {:?}, next pos = {:?}",next,pos);

        i += 1;
    }

    //println!("{:?}", path);
    let res = path.iter().map( |(dir,len)| {
        format!("{},{}",*dir,*len)
    } ).fold( String::new(), |acc, item| {
        if acc.is_empty() {
            item
        } else {
            format!("{},{}",acc,item)
        }
    });

    println!("res={}",res);
    2
}

fn find_common_substrings(s:&str) -> HashSet<&str> {
    let mut i = 0;
    let mut j = 0;
    let mut sub_strings = HashSet::new();

    while i < s.len() {
        j = i + 3;
        while j <= s.len() {
            let sub_string = &s[i..j];

            if s[i+1..s.len()].find(sub_string).is_some() {
                sub_strings.insert(sub_string);
            }
            j = j + 4;
        }
        i = i + 4;
    }
    //println!("Found sub-strings:{:?}",sub_strings);
    sub_strings
}


fn find_valid_permutations(s:&str) -> Vec<&str> {
    let mut sub_strings:Vec<&str> = find_common_substrings(s).iter().map(|s| *s).collect();
    let mut solutions = vec![];
    println!("Found sub-strings:{:?}",sub_strings);

    for n in 0..sub_strings.len() {
        let word = sub_strings[n];
        let mut rest = s.replace(word,"").replace(",,",",").trim_matches(',').to_string();
        let mut m = 0;
        let mut solution = vec![word];
        while !rest.is_empty() && m < sub_strings.len() {
            let index = (n + m) % sub_strings.len();
            let next_word = sub_strings[index];
            if rest.find(next_word).is_some() {
                //println!(" => matched next_word={}, rest={}",next_word, rest);
                solution.push(next_word);
                rest = rest.replace(next_word, "").replace(",,", ",").trim_matches(',').to_string();
            }
            m += 1;
        }

        if rest.is_empty() {
            solutions.push(solution.clone());
            //println!("Found solution:{:?}", solution);
        }
    }

    // Sort solutions by score
    solutions.sort_by( |a,b| {
        if a.len() != b.len() {
            return a.len().cmp(&b.len())
        } else {
            let sum_a:usize = a.iter().map(|&s| s.len()).sum();
            let sum_b:usize = b.iter().map(|&s| s.len()).sum();
            sum_b.cmp( &sum_a)
        }
    });

    /*solutions.iter().enumerate().for_each(|(i,v)| {
        println!("i={}, {:?}",i, v);
    });*/
    solutions.remove(0)
}





#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test1() {
        let opcodes = vec![1,330,331,332,109,4588,1101,1182,0,16,1102,1,1533,24,102,1,0,570,1006,570,36,102,1,571,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,16,1,16,1008,16,1533,570,1006,570,14,21101,0,58,0,1106,0,786,1006,332,62,99,21102,333,1,1,21101,73,0,0,1106,0,579,1102,0,1,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21101,340,0,1,1106,0,177,21101,477,0,1,1105,1,177,21102,1,514,1,21102,176,1,0,1106,0,579,99,21101,0,184,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21102,1,375,1,21101,0,211,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21101,0,233,0,1105,1,579,21101,1182,22,1,21102,244,1,0,1106,0,979,21102,401,1,1,21101,255,0,0,1106,0,579,21101,1182,33,1,21102,266,1,0,1105,1,979,21102,1,414,1,21102,277,1,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21101,313,0,0,1106,0,622,1005,575,327,1101,0,1,575,21101,0,327,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,38,28,0,109,4,2102,1,-3,586,21001,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2106,0,0,109,5,2102,1,-4,629,21001,0,0,-2,22101,1,-4,-4,21102,0,1,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21002,0,1,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,756,0,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,774,1,0,1105,1,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,20101,0,576,-6,21002,577,1,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21102,0,1,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,47,-3,22201,-6,-3,-3,22101,1533,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1105,1,924,1205,-2,873,21102,35,1,-4,1106,0,924,2101,0,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1101,2,0,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,47,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,65,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21102,973,1,0,1106,0,786,99,109,-7,2105,1,0,109,6,21101,0,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21102,-4,1,-2,1106,0,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,0,439,1,1105,1,1150,21101,0,477,1,1106,0,1150,21102,1,514,1,21102,1149,1,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2105,1,0,24,9,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,46,1,46,1,46,1,46,9,46,1,18,9,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,14,9,3,1,7,13,14,1,3,1,3,1,3,1,7,1,18,13,3,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,13,14,1,7,1,7,1,11,1,3,1,14,1,7,1,7,1,9,13,8,1,7,1,7,1,9,1,1,1,3,1,14,9,7,1,9,1,1,1,3,1,30,1,9,1,1,1,3,1,30,13,3,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,34,13,34,1,5,1,34,13,34,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,11,30,1,15,1,30,1,15,1,7,9,14,1,15,1,7,1,7,1,14,1,15,1,7,1,7,1,14,1,15,1,7,1,7,1,14,13,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,3,13,26,1,3,1,3,1,3,1,34,1,3,9,34,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,9,12];
        let res = part1(opcodes);
        println!("res = {}", res);
        assert_eq!(9544, res);
    }

    #[test]
    fn test2() {
        let opcodes = vec![1,330,331,332,109,4588,1101,1182,0,16,1102,1,1533,24,102,1,0,570,1006,570,36,102,1,571,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,16,1,16,1008,16,1533,570,1006,570,14,21101,0,58,0,1106,0,786,1006,332,62,99,21102,333,1,1,21101,73,0,0,1106,0,579,1102,0,1,572,1102,1,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21101,340,0,1,1106,0,177,21101,477,0,1,1105,1,177,21102,1,514,1,21102,176,1,0,1106,0,579,99,21101,0,184,0,1106,0,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21102,1,375,1,21101,0,211,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21101,0,233,0,1105,1,579,21101,1182,22,1,21102,244,1,0,1106,0,979,21102,401,1,1,21101,255,0,0,1106,0,579,21101,1182,33,1,21102,266,1,0,1105,1,979,21102,1,414,1,21102,277,1,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21101,0,1182,1,21101,313,0,0,1106,0,622,1005,575,327,1101,0,1,575,21101,0,327,0,1106,0,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,38,28,0,109,4,2102,1,-3,586,21001,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2106,0,0,109,5,2102,1,-4,629,21001,0,0,-2,22101,1,-4,-4,21102,0,1,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21002,0,1,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,756,0,0,1106,0,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21102,774,1,0,1105,1,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,20101,0,576,-6,21002,577,1,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21102,0,1,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,47,-3,22201,-6,-3,-3,22101,1533,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1105,1,924,1205,-2,873,21102,35,1,-4,1106,0,924,2101,0,-3,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1101,2,0,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,47,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,65,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21102,973,1,0,1106,0,786,99,109,-7,2105,1,0,109,6,21101,0,0,-4,21102,0,1,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21102,-4,1,-2,1106,0,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,2101,0,-2,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,0,439,1,1105,1,1150,21101,0,477,1,1106,0,1150,21102,1,514,1,21102,1149,1,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2105,1,0,24,9,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,46,1,46,1,46,1,46,9,46,1,18,9,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,18,1,7,1,19,1,14,9,3,1,7,13,14,1,3,1,3,1,3,1,7,1,18,13,3,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,1,7,1,18,1,7,1,7,1,3,13,14,1,7,1,7,1,11,1,3,1,14,1,7,1,7,1,9,13,8,1,7,1,7,1,9,1,1,1,3,1,14,9,7,1,9,1,1,1,3,1,30,1,9,1,1,1,3,1,30,13,3,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,34,13,34,1,5,1,34,13,34,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,1,40,1,5,11,30,1,15,1,30,1,15,1,7,9,14,1,15,1,7,1,7,1,14,1,15,1,7,1,7,1,14,1,15,1,7,1,7,1,14,13,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,7,1,7,1,26,1,3,1,3,13,26,1,3,1,3,1,3,1,34,1,3,9,34,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,1,7,1,38,9,12];
        let res = part2(opcodes);
        println!("res = {}", res);
        assert_eq!(2, res);
    }

    #[test]
    fn test_common_substrings() {
        let s = "R,8,R,8,R,4,R,4,R,8,L,6,L,2,R,4,R,4,R,8,R,8,R,8,L,6,L,2";

        let mut sub_strings = find_common_substrings(s);

        println!("Found sub-strings:{:?}",sub_strings);

        assert_eq!(true, sub_strings.contains("R,4,R,8"));
        assert_eq!(true, sub_strings.contains("R,8,R,8"));
        assert_eq!(true, sub_strings.contains("R,4,R,8"));
        assert_eq!(true, sub_strings.contains("R,8,L,6,L,2"));
        assert_eq!(true, sub_strings.contains("R,4,R,4,R,8"));
        assert_eq!(true, sub_strings.contains("L,6,L,2"));

    }

    #[test]
    fn test_find_valid_permutations1() {
        let s = "R,8,R,8,R,4,R,4,R,8,L,6,L,2,R,4,R,4,R,8,R,8,R,8,L,6,L,2";

        let res = find_valid_permutations(s);
        println!("{:?}", res);

    }

    #[test]
    fn test_find_valid_permutations2() {
        let s ="L,12,L,12,R,12,L,12,L,12,R,12,L,8,L,8,R,12,L,8,L,8,L,10,R,8,R,12,L,10,R,8,R,12,L,12,L,12,R,12,L,8,L,8,R,12,L,8,L,8,L,10,R,8,R,12,L,12,L,12,R,12,L,8,L,8,R,12,L,8,L,8";

        let res = find_valid_permutations(s);
        println!("{:?}", res);

    }
}