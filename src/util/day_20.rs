use crate::util::Part;
use std::collections::{HashMap, HashSet};

pub fn solve(input:String, part:Part) -> String {

    let result = match part {
        Part::Part1 => part1(input),
        Part::Part2 => part2(input)
    };

    format!("{}",result)
}



fn part1(input:String) -> i32 {
    Maze::new(input.as_str()).bfs()
}

fn part2(input:String) -> i32 {
    2
}

#[derive(Debug)]
struct Maze {
    map:HashMap<Pos,char>,
    portals:HashMap<String, Vec<Pos>>,
    pos_to_portal:HashMap<Pos,String>,
    start:Pos,
    end:Pos,
}

impl Maze {
   fn new(input:&str) -> Maze {
       // Parse input string
       let mut map = HashMap::new();
       input.lines().enumerate().for_each( |(y, line)| {
           line.chars().enumerate().for_each(|(x, ch)| {
               map.insert( Pos{x:x as i32,y:y as i32}, ch);
           })
       } );

        // Find start pos
       let mut portals:HashMap<String,Vec<Pos>> = HashMap::new();
       map.iter().for_each(|(k, item)| {
           if *item == '.' {
               let portal = Maze::gen_portals(k, &map);
               if portal.as_ref().is_some() {
                   let portal_str = portal.unwrap();

                   // Add portal
                   if portals.contains_key(&portal_str) {
                       portals.get_mut(&portal_str).unwrap().push(k.clone());
                       portals.get_mut(&portal_str).unwrap().sort();
                   } else {
                       portals.insert(portal_str, vec![k.clone()]);
                   }
               }
           }
       });

       let mut pos_to_portal = HashMap::new();
       portals.iter().for_each(|(k,i)|{
           i.iter().for_each( |p| {
               pos_to_portal.insert( p.clone(), k.clone());
           })
       });

       let start = portals.get("AA").unwrap().get(0).unwrap().clone();
       let end = portals.get("ZZ").unwrap().get(0).unwrap().clone();

       Maze{start:start,end:end,map:map,portals:portals, pos_to_portal:pos_to_portal}
    }

    fn get_portal(&self, pos:&Pos) -> Option<Pos> {
        let portal= self.pos_to_portal.get(&pos);

        if portal.is_some() && self.start.ne(&pos) && self.end.ne(&pos) {
            let other = self.portals.get(portal.unwrap()).unwrap().iter().find(|&p| p.ne(&pos)).unwrap();
            return Some(other.clone());
        }

        None
    }

    fn get_adjacent(&self, pos:&Pos) -> Vec<Pos> {
        let mut nodes = vec![pos.up(), pos.down(), pos.left(), pos.right()];
        let portal_node = self.get_portal(pos);
        if portal_node.is_some() {
            nodes.push(portal_node.unwrap());
        }

        nodes.iter().filter( |&p| *self.map.get(&p).unwrap() == '.').map(|p| p.clone()).collect()
    }

    fn gen_portals(pos:&Pos, map:&HashMap<Pos,char>) -> Option<String> {

        let r = vec![map.get(&pos.right()),map.get(&pos.right().right())];
        let l = vec![map.get(&pos.left().left()), map.get(&pos.left()),];
        let u = vec![map.get(&pos.up().up()), map.get(&pos.up())];
        let d = vec![map.get(&pos.down()),map.get(&pos.down().down())];

        let mut res = vec![];
        [r,l,u,d].iter().for_each( |d| {
            let s:String = d.iter().filter( |&opt| opt.is_some() && opt.unwrap().is_ascii_uppercase()).map(|opt| *opt.unwrap() ).collect();
            if s.len() == 2 {
                res.push(s);
            }
        });

        if res.is_empty() {
            None
        } else {
            Some(res.pop().unwrap())
        }
    }

    fn bfs(&self) -> i32 {
        let mut dist = HashMap::new();
        let mut queue = vec![];

        // Add start pos
        queue.push( self.start);
        dist.insert( self.start, 0 );

        while !queue.is_empty() {

            // Pop first item
            let current_pos = queue.pop().unwrap();
            let distance = *dist.get(&current_pos).unwrap() ;

            //println!("Eval pos:{:?}, dist={}", current_pos, distance );

            // Iterate through neighbors
            for node in self.get_adjacent(&current_pos).iter() {
                if !dist.contains_key(node) || *dist.get(node).unwrap() > (distance+1) {
                    // Add to distance
                    dist.insert(node.clone(), (distance +1));
                    queue.push(node.clone());
                }
            }


        }

        if dist.contains_key(&self.end) {
            *dist.get(&self.end).unwrap()
        } else {
            -1
        }
    }
}

#[derive(Debug,Copy, Clone,Hash,Eq, PartialEq, Ord, PartialOrd)]
struct Pos {
    x:i32,
    y:i32,
}

impl Pos {
    fn new(x:i32, y:i32) -> Pos {
        Pos{x:x,y:y}
    }

    fn up(&self) -> Pos {
        Pos::new(self.x,self.y-1)
    }

    fn down(&self) -> Pos {
        Pos::new(self.x,self.y+1)
    }

    fn left(&self) -> Pos {
        Pos::new(self.x-1,self.y)
    }

    fn right(&self) -> Pos {
        Pos::new(self.x+1,self.y)
    }
}


#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    #[test]
    fn test1() {
        let input = "         A
         A
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z
             Z";

        let maze = Maze::new(input);
        println!("{:?}",maze);

        // Check start / end
        assert_eq!(Pos::new(9,2), maze.start);
        assert_eq!(Pos::new(13,16), maze.end);

        // Check portals
        assert_eq!(Pos::new(9,2), *maze.portals.get("AA").unwrap().get(0).unwrap());
        assert_eq!(Pos::new(2,8), *maze.portals.get("BC").unwrap().get(0).unwrap());
        assert_eq!(Pos::new(9,6), *maze.portals.get("BC").unwrap().get(1).unwrap());
        assert_eq!(Pos::new(2,13), *maze.portals.get("DE").unwrap().get(0).unwrap());
        assert_eq!(Pos::new(6,10), *maze.portals.get("DE").unwrap().get(1).unwrap());

        // Check pos to portal
        assert_eq!("DE",maze.pos_to_portal.get(&Pos::new(2,13)).unwrap());
        assert_eq!("DE",maze.pos_to_portal.get(&Pos::new(6,10)).unwrap());
        assert_eq!("BC",maze.pos_to_portal.get(&Pos::new(9,6)).unwrap());
        assert_eq!("BC",maze.pos_to_portal.get(&Pos::new(2,8)).unwrap());
        assert_eq!("AA",maze.pos_to_portal.get(&Pos::new(9,2)).unwrap());
        assert_eq!(None,maze.pos_to_portal.get(&Pos::new(10,2)));

        // Check portal mapping
        assert_eq!(Pos::new(6,10), maze.get_portal( &Pos::new(2,13)).unwrap());
        assert_eq!(Pos::new(9,6), maze.get_portal( &Pos::new(2,8)).unwrap());

        assert_eq!(None, maze.get_portal( &Pos::new(9,2)));
        assert_eq!(None, maze.get_portal( &Pos::new(10,2)));

        let res = maze.bfs();
        assert_eq!(26, res);
    }

    #[test]
    fn test2() {
        let input = "                   A
                   A
  #################.#############
  #.#...#...................#.#.#
  #.#.#.###.###.###.#########.#.#
  #.#.#.......#...#.....#.#.#...#
  #.#########.###.#####.#.#.###.#
  #.............#.#.....#.......#
  ###.###########.###.#####.#.#.#
  #.....#        A   C    #.#.#.#
  #######        S   P    #####.#
  #.#...#                 #......VT
  #.#.#.#                 #.#####
  #...#.#               YN....#.#
  #.###.#                 #####.#
DI....#.#                 #.....#
  #####.#                 #.###.#
ZZ......#               QG....#..AS
  ###.###                 #######
JO..#.#.#                 #.....#
  #.#.#.#                 ###.#.#
  #...#..DI             BU....#..LF
  #####.#                 #.#####
YN......#               VT..#....QG
  #.###.#                 #.###.#
  #.#...#                 #.....#
  ###.###    J L     J    #.#.###
  #.....#    O F     P    #.#...#
  #.###.#####.#.#####.#####.###.#
  #...#.#.#...#.....#.....#.#...#
  #.#####.###.###.#.#.#########.#
  #...#.#.....#...#.#.#.#.....#.#
  #.###.#####.###.###.#.#.#######
  #.#.........#...#.............#
  #########.###.###.#############
           B   J   C
           U   P   P";

        let maze = Maze::new(input);
        println!("{:?}",maze);

        let res = maze.bfs();
        assert_eq!(58, res);

    }

    #[test]
    fn test_part1() {
        let input = "                                     X       H           D   Z O       K   W
                                     N       O           W   Z S       L   F
  ###################################.#######.###########.###.#.#######.###.#######################################
  #.....#.........................#.....#.#...#...........#.#.....#.......#...............................#.....#.#
  ###.#####.#.#####.#######.###.#####.###.#.#######.#####.#.#####.#######.###.###.###.###.#.#.###.#######.###.###.#
  #.#...#...#.#.#.....#...#.#.#.#.......#...#.#.#.....#.#.#.....#...#.....#.#...#...#...#.#.#.#.......#...#.....#.#
  #.#.#########.#########.###.#.###.#####.#.#.#.#.###.#.#.###.#.#.#.###.###.#####.###.#####.#####.###########.###.#
  #.....#.#.....#.........#...........#.#.#.....#.#.#.#...#...#...#.#.......#.#.....#.#.#.#...#...#.#.#...#...#.#.#
  #.#####.#####.###.#####.###.###.#.###.#####.#####.#.###.###.#########.#.###.###.#####.#.#########.#.#.###.###.#.#
  #.....#...#.#...#...#.......#.#.#.......#.#.#.#.....#.#.#.........#...#.#.#...#.....#.#...#.#...#.#.#.....#.#...#
  ###.#####.#.###.#######.###.#.#######.###.#.#.###.###.###.#####.#####.#.#.#.#.#.###.#.#.###.###.#.#.###.###.#.###
  #.#.....#.#...#...#.#.#.#.#.#.#.......#.......#.........#.#...#.#.....#.#...#.#.#.........#.#.#...........#...#.#
  #.#.#####.###.#.###.#.###.###.###.#.#.#.###.#####.###########.#.###.###.#.###.#.###.#.#.###.#.#.###.###.#####.#.#
  #.......#.#.#.#...#.#...#.........#.#.#.#.....#.......#.#.#...#...#.#...#.#.....#.#.#.#...........#...#...#...#.#
  ###.#.###.#.#.#.#.#.###.#########.###.#####.#####.#####.#.###.#.#######.#.#.#.###.#####.###.#.###############.#.#
  #.#.#.#.......#.#.#...#.....#...#...#.#...#...#.....#.#...........#.....#.#.#.....#.#...#.#.#.#.#.....#.#...#...#
  #.#.#########.###.#.#####.#####.#.#######.#.#.###.###.#######.#.#######.#.###.#####.###.#.#####.#.#.#.#.###.#.###
  #...#...#.....................#.#...#.#.#...#.#...#...#.......#.#...#...#...#.....#...............#.#...#.....#.#
  #.#.#.###.#.###.###.#####.#.#.#.#.###.#.#.#######.###.#####.###.###.###.#.###.###########.#.###.#########.###.#.#
  #.#.#...#.#.#.#.#.....#...#.#.........#.#.#.#.#...#.....#.....#...#...#.#...#.#.....#...#.#.#.#.....#.#...#...#.#
  #.###.#######.#####.#.#.#.###.#######.#.#.#.#.###.###.#.#.#####.###.#.#.###.###.#.#####.#####.#######.#######.#.#
  #.....#...#.#...#.#.#.#.#.#...#.#.....#.#.#.#...#.....#.#.#.#.....#.#...#...#.#.#.#.....#...#.........#.......#.#
  #.#######.#.###.#.###.#######.#.#.#####.#.#.#.#####.#######.#.#.###.#.#.#.###.#.#####.#.#.#########.#####.###.#.#
  #.......#.....#...#...#.......#.........#...#...#.#.....#.....#.#...#.#.#.....#...#...#.#.........#...#.#.#...#.#
  #.#########.###.#.#######.#########.#.#####.#.#.#.#####.#.#####.#.###########.#.###.#####.#.#######.#.#.#####.#.#
  #.#...#.#.#...#.#.......#...#.#.#...#...#.#...#...#.....#...#.#.#...#.....#.#...#.........#...#.#...#...#.#.#...#
  #.#.###.#.#.#######.###.#####.#.#######.#.#####.#####.#.###.#.###.#####.###.#.#.#.#.###.#.#####.###.#####.#.###.#
  #...#.#.#...#.#...#.#.#.#.#...#.#.#.#.......#...#.#.#.#.#...#...#.......#.....#...#...#.#.#.....#.....#.#...#...#
  #.###.#.#.#.#.###.###.#.#.###.#.#.#.###.###.#.#.#.#.###.#.###.###.#####.#######.###########.#.#####.###.###.###.#
  #.#.#...#.#.....#...#.#.#.......#.......#.#.#.#.#.......#...#.#.....#.....#...#.........#.#.#.#.#.#.#.#.#.......#
  #.#.###.###.#######.#.#.#####.###.#####.#.###.###.#.#.#####.#.###.#.#.#.#####.#.#########.###.#.#.#.#.#.###.#####
  #.#.#.#.........#.........#.#.........#...#.....#.#.#.#.........#.#.#.#.#.......#...#...#.#.....#.#.#...#.......#
  #.#.#.#####.###########.#.#.#.#######.#####.#####.###########.#######.###.#########.###.#.###.###.#.#.#.###.#####
  #.....#...#.#.....#.#.#.#.#.#.#      S     K     H           R       I   H        #.#.......#.#.....#.#.#.....#.#
  #####.###.#.#####.#.#.#.###.###      U     A     W           P       O   C        #.###.#####.###.#.###.###.###.#
  #.#.#...#.....#.#...#...#.#...#                                                   #.....#...#...#.#.#.#...#...#.#
  #.#.#.#####.###.###.###.#.#.###                                                   ###.#####.#.###.###.###.#.###.#
  #.#...#...#.#...............#.#                                                 NZ..............#.............#.#
  #.#.#####.#.###.#######.###.#.#                                                   #.###.#####.###.###.#.###.###.#
KA....#.#.......#.#.......#.....#                                                   #.#.#.#.........#.#.#...#.....#
  #.###.#####.#########.#######.#                                                   ###.#####.#.###.#.#.#########.#
  #.......#...#.#.#.#.#.....#....DA                                                 #...#.#.#.#.#.....#.#.#...#.#..HC
  ###.###.#.#.#.#.#.#.#####.###.#                                                   #.#.#.#.#########.#.#.#.###.###
  #...#.....#...............#...#                                                   #.#.......#.#.#.#.#.#..........PZ
  #.#####################.#.#.#.#                                                   #####.#.###.#.#.#####.#.###.#.#
  #.#.......#.........#.#.#.#.#.#                                                   #.#...#...............#...#.#.#
  ###.###.#.#.#######.#.#########                                                   #.###.#####.###.#.#########.###
RO....#.#.#...#.#.#.....#.#.....#                                                   #...#...#.....#.#.#...#.#.#...#
  ###.#.###.###.#.###.#.#.###.#.#                                                   ###.#.###########.#.###.#.#####
  #.....#.#.#.#.#.#.#.#.....#.#.#                                                 XN......#.#.#...#.......#...#...#
  #######.###.#.#.#.###.###.#.#.#                                                   #####.#.#.###.#.###.###.#.#.###
  #...#.......#...#...#.#.....#..WF                                               TZ....#.#.......#.#...#...#.#.#.#
  ###.###.#####.#####.###########                                                   ###.###.#.#.#####.#######.#.#.#
TZ....#...#.....................#                                                   #.......#.#.#.#.....#...#.#.#..YK
  ###.#.#.#.#######.###.#####.#.#                                                   ###.#.###.###.#######.###.#.#.#
  #...#.#.#.....#...#.#.#...#.#.#                                                   #...#.#...#.......#.#...#.....#
  ###.#.#.###.#######.###.#####.#                                                   #########.#.#.#####.#.###.###.#
  #.#...#.......#.....#.#...#....QN                                                 #...#.#.....#.............#...#
  #.###############.###.#.#####.#                                                   ###.#.###.#.###.#.#.#.#.#######
  #...#.....#.#.......#...#.....#                                                   #.#.....#.#.#.#.#.#.#.#.#...#.#
  #.###.#.#.#.#.#####.#.#.#####.#                                                   #.###.#######.###########.#.#.#
  #.#.#.#.#...#...#...#.#...#.#.#                                                   #.#.......#.#.....#.....#.#....IO
  #.#.#.#####.#.###.###.###.#.###                                                   #.###.###.#.#.#########.#.###.#
  #.......#.......#.#.....#.....#                                                 JZ......#.........#.#.#.....#...#
  #.###.#####.#####.#####.#.#####                                                   #########.###.###.#.###.#####.#
DQ....#...#.....#.........#......JO                                                 #...#.#.#.#.................#.#
  #.###.#####.###################                                                   ###.#.#.#######.#######.#######
  #...#.#...#.#.....#.#...#.....#                                                   #.#...........#.#.....#...#...#
  #####.###.#####.###.#.#.#.###.#                                                   #.#.#####.###.#####.#########.#
RU....#.#.....#.#...#...#.#...#.#                                                 OS....#.#...#...#.....#.#...#.#.#
  #.#######.###.#.#.#.###.###.#.#                                                   #.#.#.###.#.#.###.#.#.###.#.#.#
  #...............#.....#.....#..QT                                                 #.#...#...#.#...#.#...#.#.....#
  #.#######.#.###.###.###########                                                   ###.#.#####.#####.###.#.#.###.#
  #.#.#.#...#.#...#.#...#.#.#...#                                                   #.#.#.#...#.........#.......#..QN
  ###.#.###.#.###.#.#####.#.#.#.#                                                   #.#.#.###.#####################
  #.#...#...#.#...#.#.#.#.....#.#                                                   #.#.#.#.............#.#...#.#..HW
  #.#.#############.#.#.#####.#.#                                                   #.#####.#.#########.#.#.#.#.#.#
  #.#.#...#.#...#.#.......#.#.#..DQ                                                 #.#.#...#.#...#.........#.....#
  #.#.#.###.#.###.###.#.###.#.###                                                   #.#.#####.#.###.#####.#.###.###
JZ....................#.........#                                                 QO....#.#.......#.#.#...#...#...#
  ###.#########################.#                                                   ###.#.#.#.#######.###.###.#.#.#
PF..#.#.......#.....#.........#.#                                                   #.......#...#...#.....#.#.#.#.#
  #.###.###.#.#.###.#.#.###.#####                                                   #############.#####.#.#.#######
  #.......#.#.....#...#.#.......#                                                   #...#...#...#...#...#.#.#...#.#
  #.#.#.###.#.#####.#.###.#.#####                                                   #.#.#.#.#.###.#####.###.###.#.#
  #.#.#...#.#.....#.#.#.#.#.#.#.#                                                 KL..#.#.#.#.....#...#.#.#.......#
  #.#.###.#####.###.###.###.#.#.#                                                   ###.#.#.#.#.#####.###.#######.#
  #.#...#...#...#...#............RU                                                 #...#.#...#...#.#.#.#...#.#.#..RP
  #.#.###.###.###.#.#.#.#.#.###.#                                                   #.###.#.#.###.#.#.#.#.###.#.#.#
  #.#...#.#.....#.#.#.#.#.#...#.#                                                   #.....#.#.#...................#
  ###.###.#.###.###.###.###.###.#      D     P         Y         O     H   R   P    #.###.#######.#.#########.#.###
  #...#...#.#...#.....#.#...#.#.#      W     Z         K         A     O   O   F    #.#.......#...#.....#.....#...#
  #.#.###.###.###.#.#.#####.#.#########.#####.#########.#########.#####.###.###.#####.###.###.#.#.#.#######.#.#.###
  #.#.#.....#...#.#.#.#.#.........#.........#.#...#.......#.......#.#...#.....#.....#.#.....#.#.#.#...#.#...#.#...#
  ###.###.###.#.#.#.###.#.###.#.###.###.###.#.#.#.###.#.#.#####.###.#.#####.#.#.#.#.#########.#####.#.#.###.###.###
  #.....#...#.#.#.#...#.....#.#.#.#.#...#.#.#...#...#.#.#.....#.#.........#.#.#.#.#.....#.#...#.#...#...#...#.....#
  ###.#.#.#########.#######.#####.#######.#.#####.###.#.#######.###.#######.###.#.#######.#####.#####.#####.###.#.#
  #...#.#.#.#.#.#.....#.#...#...............#...#...#.#.#...#.....#.....#...#...#...#.#.........#.........#...#.#.#
  #.#.#.###.#.#.#.#####.#######.#.#.#.###.###.#.#.###.#####.#####.#.###.###.#.###.###.#.###########.###.#.###.#.#.#
  #.#.#...#.......#.#...#...#...#.#.#.#.#...#.#...#.......#.......#.#.#.#.......#.......#.......#...#...#...#.#.#.#
  #####.#########.#.#.###.#############.###.#.#######.###.#.#######.#.#####.###.#.#####.#####.#####.#.#.#.###.###.#
  #.#.......#.......#.#...#.................#.#.....#...#.#.#.#.#.....#.......#.#.....#...........#.#.#.#...#...#.#
  #.#.###.#.#########.#.#############.#######.#.###.###.###.#.#.###.#.###.#######.#####.#.#.#.#.#######.###.#.###.#
  #.....#.#.#.....#...#...#.#...............#.#...#...#.#...#.....#.#...#.#.#.........#.#.#.#.#...#.......#.#...#.#
  #.#.#####.#####.###.#.###.###############.#.###.#.###.###.#.###.#.#####.#.###.#####.###.###.#.#.###.#.#.#######.#
  #.#...#.....#.#.....#.....#.....#.#.......#.....#.#.....#.....#.#...#...#...#...#.#...#...#.#.#.#...#.#.#.......#
  #.#.#########.#####.#.#########.#.#.#######.#####.#.#.#.#.#.###.#.#########.#.###.#.###.#####.###.#.#.#########.#
  #.#.#...#.....#...#.....#.#.#.........#.......#...#.#.#.#.#.#.#.#...#.....#.......#.#.....#.....#.#.#...#.......#
  #.#####.#####.#.###.#.###.#.###.#.#.###.#.#.###.#.#.#####.###.#.#.#####.#######.#.###########.#####.#######.#.###
  #.#.......#.........#.#.#.......#.#.#.#.#.#.#...#.#.#.#.....#...#...#.....#...#.#.#...#...#...#.#.#.....#...#...#
  ###.###.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#####.###.#.#########.#.###.#######.#.#####.###.###.#.#.#########.###.#
  #.#...#.#...#.#.#.#.#...#.#.#.#...#.....#.#.......#...#.....#...#.......#.#.#...#.#...#.....#.#...#.....#.#.#...#
  #.#.#.#.#.#.#.#######.#####.###.###.#########.###.#.#####.#####.#######.#.#.#.###.#.###.#######.#.#.#.#.#.#####.#
  #.#.#.#.#.#.#.#.........#.........#.......#...#...#.....#...#...#.........#...........#.....#...#.#.#.#.#...#.#.#
  #.#####.###.#########.#########.###.#######.#####.#####.###.###.###.#.#.#######.#.#####.#.#####.###.#####.###.#.#
  #.......#.#.#.............#.....#...#.#.#.....#.#.#.....#...#.....#.#.#.#.....#.#...#.#.#...#...#...#.#.....#...#
  #.#.#####.###.###.#.#####.#########.#.#.#.#####.#.#.#.#.###.###.###.#######.#.#.#####.#.#####.#####.#.###.#######
  #.#...#.....#.#.#.#.#.#.........#.......#.#.#.#...#.#.#.#.......#...#...#.#.#.....................#...#.........#
  #########.#.###.#####.###.#####.###.#######.#.###.#.#######.###.#.#####.#.#.###############.#.#####.###.#########
  #.........#.........#.....#.........#...#.#...#...#...#...#.#...#.#.#.....................#.#...................#
  ###.#.#####.#####.###.#.#####.#####.###.#.#.###.#.#.#.###.#.#####.#.###########.#######.#####.###.###########.###
  #...#.#.......#.......#.#.......#.....#.........#.#.#.#.......#.......#...............#.....#.#...........#.....#
  ###################################.#######.#.#####.#####.###########.###.###.###################################
                                     J       A O     Q     N           Q   S   D
                                     O       A A     T     Z           O   U   A                                     ";

        let maze = Maze::new(input);
        println!("{:?}",maze);

        let res = maze.bfs();
        assert_eq!(552, res);

    }




}